@model AddStudentSectionViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
  ViewData["Title"] = "AddStudentSection";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-container">
  <!-- BEGIN CONTENT -->
  <div class="page-content-wrapper">
    <div class="page-content">
      <div class="portlet-body form">
        <!-- BEGIN FORM-->
        <div class="title-on-top">@Localizer["AddStudentSection.Title"]</div>
        <form asp-action="AddStudentSection" class="form-horizontal box-shadow-form" id="form_sample_3">
          <div class="form-body">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input asp-for="StudentId" type="hidden" runat="server" />
            <div class="row-fluid col-md-12 zero-padding-row">
              <div class="col-md-6">
                <div class="form-group">
                  <div class="col-md-4">
                    <label>@Localizer["AddStudentSection.Institute"] </label><span class="required">*</span>
                  </div>
                  <div class="col-md-8">
                    @{
                      if (Model.Institutes != null && Model.Institutes.Any())
                      {
                        @Html.DropDownListFor(x => Model.InstituteId, new SelectList(Model.Institutes, "Id", "OrganisationName"), @Localizer["AddStudentSection.SelectInstitute"].Value, new { @class = "form-control", id = "instituteDropDown" })
                      }
                      else
                      {
                        @Html.DropDownListFor(x => Model.InstituteId, Enumerable.Empty<SelectListItem>(), @Localizer["AddStudentSection.SelectInstitute"].Value, new { @class = "form-control" })
                      }
                    }
                    <span asp-validation-for="InstituteId" class="text-danger"></span>
                  </div>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <div class="col-md-4">
                    <label>@Localizer["AddStudentSection.Section"] </label><span class="required">*</span>
                  </div>
                  <div class="col-md-8">
                    @{
                      @Html.DropDownListFor(x => Model.SectionId, Enumerable.Empty<SelectListItem>(), @Localizer["AddStudentSection.SelectSection"].Value, new { @class = "form-control", id = "sectionDropDown" })
                    }
                    <span asp-validation-for="SectionId" class="text-danger"></span>
                  </div>
                </div>
              </div>
            </div>
            <div class="clearfix"></div>
            <div class="row-fluid col-md-12 zero-padding-row">
              <div class="col-md-6">
                <div class="form-group">
                  <div class="col-md-4">
                    <label>@Localizer["AddStudentSection.Branch"] </label><span class="required">*</span>
                  </div>
                  <div class="col-md-8">
                    @{
                      @Html.DropDownListFor(x => Model.BranchId, Enumerable.Empty<SelectListItem>(), @Localizer["AddStudentSection.SelectBranch"].Value, new { @class = "form-control", id = "branchDropDown" })
                    }
                    <span asp-validation-for="BranchId" class="text-danger"></span>
                  </div>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <div class="col-md-4">
                    <label>@Localizer["AddStudentSection.Session"] </label><span class="required">*</span>
                  </div>
                  <div class="col-md-8">
                    @{
                      @Html.DropDownListFor(x => Model.SessionId, Enumerable.Empty<SelectListItem>(), @Localizer["AddStudentSection.SelectSession"].Value, new { @class = "form-control", id = "sessionDropDown" })
                    }
                    <span asp-validation-for="SessionId" class="text-danger"></span>
                  </div>
                </div>
              </div>
            </div>
            <div class="clearfix"></div>
            <div class="row-fluid col-md-12 zero-padding-row">
              <div class="col-md-6">
                <div class="form-group">
                  <div class="col-md-4">
                    <label>@Localizer["AddStudentSection.Medium"] </label><span class="required">*</span>
                  </div>
                  <div class="col-md-8">
                    @{
                      @Html.DropDownListFor(x => Model.MediumId, Enumerable.Empty<SelectListItem>(), @Localizer["AddStudentSection.SelectMedium"].Value, new { @class = "form-control", id = "mediumDropDown" })
                    }
                    <span asp-validation-for="MediumId" class="text-danger"></span>
                  </div>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <div class="col-md-4">
                    <label>@Localizer["AddStudentSection.RollNo"] </label><span class="required">*</span>
                  </div>
                  <div class="col-md-8">
                    <input asp-for="RollNo" type="text" value="" class="form-control" />
                    <span asp-validation-for="RollNo" class="text-danger"></span>
                  </div>
                </div>
              </div>
            </div>
            <div class="clearfix"></div>
            <br />
            <div class="btn-container">
              <button type="button" class="btn custom-btn custom-cancel-btn pull-left">@Localizer["AddStudentSection.CancelButton"]</button>
              <button type="submit" class="btn custom-btn custom-cancel-btn pull-right">@Localizer["AddStudentSection.CreateButton"]</button>
              <div class="clearfix"></div>
            </div>
          </div>
        </form>
        <!-- END FORM-->
      </div>
    </div>
  </div>
</div>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script type="text/javascript">
  $(function () {
    var branchDropDown = $("#branchDropDown");
    $("#instituteDropDown").click(function () {
      $.ajax({
        type: "POST",
        url: "/StudentSection/GetBranches?instituteId=" + $("#instituteDropDown").val(),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (response) {
          branchDropDown.empty();
          branchDropDown.append(new Option("Select Branch", ""));
          jQuery.each(response, function (index, item) {
            var dropdownItem = new Option(item.BranchName, item.Id);
            branchDropDown.append(dropdownItem);
          });
        },
        failure: function (response) {
          alert("Failure..! Could not Fetch Branch Data.");
        },
        error: function (response) {
          alert("Error..! Could not Fetch Branch Data.");
        }
      });
    });
  });

  $(function () {
    var mediumDropDown = $("#mediumDropDown");
    $("#branchDropDown").change(function () {
      $.ajax({
        type: "POST",
        url: "/StudentSection/GetMediums?branchId=" + $("#branchDropDown").val(),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (response) {
          mediumDropDown.empty();
          mediumDropDown.append(new Option("Select Medium", ""));
          jQuery.each(response, function (index, item) {
            var dropdownItem = new Option(item.MediumName, item.Id);
            mediumDropDown.append(dropdownItem);
          });
        },
        failure: function (response) {
          alert("Failure..! Could not Fetch Medium Data.");
        },
        error: function (response) {
          alert("Error..! Could not Fetch Medium Data.");
        }
      });
    });
  });

  $(function () {
    var sessionDropDown = $("#sessionDropDown");
    $("#mediumDropDown").change(function () {
      $.ajax({
        type: "POST",
        url: "/StudentSection/GetSessions?mediumId=" + $("#mediumDropDown").val() + "&branchId=" + $("#branchDropDown").val(),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (response) {
          sessionDropDown.empty();
          sessionDropDown.append(new Option("Select Session", ""));
          jQuery.each(response, function (index, item) {
            var dropdownItem = new Option(item.SessionName, item.Id);
            sessionDropDown.append(dropdownItem);
          });
        },
        failure: function (response) {
          alert("Failure..! Could not Fetch Session Data.");
        },
        error: function (response) {
          alert("Error..! Could not Fetch Session Data.");
        }
      });
    });
  });

  $(function () {
    var sectionDropDown = $("#sectionDropDown");
    $("#mediumDropDown").change(function () {
      $.ajax({
        type: "POST",
        url: "/StudentSection/GetSections?mediumId=" + $("#mediumDropDown").val() + "&branchId=" + $("#branchDropDown").val(),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (response) {
          sectionDropDown.empty();
          sectionDropDown.append(new Option("Select Section", ""));
          jQuery.each(response, function (index, item) {
            var dropdownItem = new Option(item.SectionName, item.Id);
            sectionDropDown.append(dropdownItem);
          });
        },
        failure: function (response) {
          alert("Failure..! Could not Fetch Session Data");
        },
        error: function (response) {
          alert("Error..! Could not Fetch Session Data");
        }
      });
    });
  });


</script>