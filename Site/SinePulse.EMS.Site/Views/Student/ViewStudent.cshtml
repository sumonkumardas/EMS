@model SinePulse.EMS.Site.Models.StudentViewModel
@using SinePulse.EMS.Domain.Features
@using Microsoft.AspNetCore.Mvc.Localization
@using SinePulse.EMS.Domain.Enums
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "ViewStudent";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="page-container">
    <div class="page-content-wrapper">
        <div class="page-content">
            <!-- END PAGE HEADER-->
            <!-- BEGIN PAGE CONTENT-->
            <div class="row">
                <div class="col-md-12">
                    <!-- BEGIN PROFILE SIDEBAR -->
                    <div class="profile-sidebar">
                        <!-- PORTLET MAIN -->
                        <div class="portlet light profile-sidebar-portlet">
                            <!-- SIDEBAR USERPIC -->
                            <div class="profile-userpic">
                                @{
                                    if (Model.ImageUrl != null)
                                    {
                                        <img src="/Uploads/Student/@Url.Content(Model.ImageUrl)" />
                                    }
                                    else
                                    {
                                        <img src="../../img/managingCommittee/generic.png" />
                                    }
                                }
                            </div>
                            <!-- END SIDEBAR USERPIC -->
                            <!-- SIDEBAR USER TITLE -->
                            <div class="profile-usertitle-name small-title">
                                @Html.DisplayFor(model => model.FullName)
                                <div class="profile-stat-text">
                                    @Localizer["ViewStudent.Name"]
                                </div>
                            </div>
                            <hr />
                            <!-- END SIDEBAR USER TITLE -->
                            <div class="profile-usertitle-name">
                                @if (Model.HasPermission(Feature.InstituteEnum.ViewInstitute.ToString()))
                                {
                                    <a  href="/Institute/ViewInstitute?instituteId=@Model.InstituteId">@Html.DisplayFor(model => model.InstituteName)</a>
                                }
                                else
                                {
                                    @Html.DisplayFor(model => model.InstituteName)
                                }
                            </div>
                            <div class="profile-stat-text">
                                @Localizer["ViewStudent.Institute"]
                            </div>
                            <hr />
                            <div class="profile-usertitle-name">
                                @if (Model.HasPermission(Feature.BranchEnum.ViewBranch.ToString()))
                                {
                                    <a href="/Branch/ViewBranch?branchId=@Model.BranchId">@Html.DisplayFor(model => model.BranchName)</a>
                                }
                                else
                                {
                                    @Html.DisplayFor(model => model.BranchName)
                                }
                            </div>
                            <div class="profile-stat-text">
                                @Localizer["ViewStudent.Branch"]
                            </div>
                            <hr />
                            <div class="profile-usertitle-name">
                                @if (Model.HasPermission(Feature.BranchMediumEnum.ViewBranchMedium.ToString()))
                                {
                                    <a href="/BranchMedium/ViewBranchMedium?branchMediumId=@Model.BranchMediumId">@Html.DisplayFor(model => model.MediumName)</a>
                                }
                                else
                                {
                                    @Html.DisplayFor(model => model.MediumName)
                                }
                            </div>
                            <div class="profile-stat-text">
                                @Localizer["ViewStudent.Medium"]
                            </div>
                            <hr />
                            <div class="profile-usertitle-name">
                              <div class="profile-usertitle-name">
                                @Html.DisplayFor(model => model.ShiftName)
                              </div>
                            </div>
                            <div class="profile-stat-text">
                              @Localizer["ViewStudent.Shift"]
                            </div>
                            <hr />
                            <br />

                            <div class="row-fluid">
                                <div class="col-md-3">
                                    <div class="profile-usertitle-name">
                                        @Html.DisplayFor(model => model.ClassName)
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="profile-usertitle-name">
                                        @Html.DisplayFor(model => model.Group)
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="profile-usertitle-name">
                                        @if (Model.HasPermission(Feature.SectionEnum.ViewSection.ToString()))
                                        {
                                            <a href="/Section/ViewSection?sectionId=@Model.SectionId">@Html.DisplayFor(model => model.SectionName)</a>
                                        }
                                        else
                                        {
                                            @Html.DisplayFor(model => model.SectionName)
                                        }
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="profile-usertitle-name">
                                        @{
                                            if (Model.Roll > 0)
                                            {
                                                @Html.DisplayFor(model => model.Roll)
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="clearfix"></div>
                            <div class="row-fluid">
                                <div class="col-md-3">
                                    <div class="profile-stat-text">
                                        @Localizer["ViewStudent.Class"]
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="profile-stat-text">
                                        @Localizer["ViewStudent.Group"]
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="profile-stat-text">
                                        @Localizer["ViewStudent.Section"]
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="profile-stat-text">
                                        @Localizer["ViewStudent.Roll"]
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- END PORTLET MAIN -->
                    </div>
                    <!-- END BEGIN PROFILE SIDEBAR -->
                    <!-- BEGIN PROFILE CONTENT -->
                    <div class="profile-content">
                        <div class="row">

                            <div class="col-md-12">
                                <!-- BEGIN PORTLET -->
                                <div class="portlet light">
                                    <div class="portlet-title tabbable-line">
                                        <div class="page-toolbar custom-page-menu-bar">
                                            <div class="btn-group">
                                                <input type="hidden" asp-for="Id" id="studentId"/>
                                                <input type="hidden" asp-for="BranchMediumId" id="branchMediumId"/>
                                                <ul style="padding: 0px;">

                                                    <li class="custom-page-menu dropdown primary-menu-item-li">
                                                        <a href="#" class="show-dropdown-on-hover" data-toggle="custom-page-menu">
                                                            <button type="button" class="btn btn-fit-height dark-bg dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" data-delay="100" data-close-others="true">
                                                                <i class="fa fa-bars"></i>
                                                            </button>
                                                        </a>
                                                        <ul class="dropdown-menu light-arrow-only">
                                                            @if (Model.HasPermission(Feature.StudentEnum.AddOrChangePhoto.ToString()))
                                                            {
                                                                <li>
                                                                    <a href="/Student/UploadStudentImage?studentId=@Model.Id&branchMediumId=@Model.BranchMediumId">@Localizer["ViewStudent.AddChangePhoto"]</a>
                                                                </li>
                                                            }
                                                            @if (Model.HasPermission(Feature.StudentEnum.AddAddress.ToString()))
                                                            {
                                                                <li>
                                                                    <a href="/Student/AddStudentAddress?studentId=@Model.Id&branchMediumId=@Model.BranchMediumId">@Localizer["ViewStudent.AddAddress"]</a>
                                                                </li>
                                                            }
                                                            @if (Model.HasPermission(Feature.StudentEnum.AddContactPerson.ToString()))
                                                            {
                                                                <li>
                                                                    <a href="/Student/AddStudentContactPerson?studentId=@Model.Id&branchMediumId=@Model.BranchMediumId">@Localizer["ViewStudent.AddContactPerson"]</a>
                                                                </li>
                                                            }
                                                            @if (Model.HasPermission(Feature.StudentEnum.AddAttendance.ToString()))
                                                            {
                                                                <li>
                                                                    <a href="/Student/AddStudentAttendance?studentId=@Model.Id&branchMediumId=@Model.BranchMediumId">@Localizer["ViewStudent.AddAttendance"]</a>
                                                                </li>
                                                            }
                                                            <li>
                                                                <a href="/Subject/AddOptionalSubject?studentId=@Model.Id&branchMediumId=@Model.BranchMediumId">@Localizer["ViewStudent.AddOptionalSubject"]</a>
                                                            </li>
                                                            @if (Model.HasPermission(Feature.StudentEnum.WaiveAcademicFees.ToString()))
                                                            {
                                                                <li><a href="/Waiver/AddStudentWaiver?studentId=@Model.Id&branchMediumId=@Model.BranchMediumId">@Localizer["ViewStudent.WaiveAcademicFees"]</a></li>
                                                            }
                                                            <li class="dropdown-submenu">
                                                                <a class="dropdown-item" href="#">@Localizer["ViewStudent.CollectAcademicFees"]</a>
                                                                <ul class="dropdown-menu">
                                                                    <li>
                                                                        <a href="/FeeCollection/CollectAcademicFee?studentId=@Model.Id&branchMediumId=@Model.BranchMediumId&feePeriod=@AcademicFeePeriodEnum.Monthly">@Localizer["ViewStudent.CollectMonthlyFee"]</a>
                                                                    </li>
                                                                    <li>
                                                                        <a href="/FeeCollection/CollectAcademicFee?studentId=@Model.Id&branchMediumId=@Model.BranchMediumId&feePeriod=@AcademicFeePeriodEnum.Yearly">@Localizer["ViewStudent.CollectYearlyFee"]</a>
                                                                    </li>
                                                                </ul>
                                                            </li>
                                                        </ul>
                                                    </li>
                                                </ul>

                                            </div>

                                        </div>
                                        <ul class="nav nav-tabs custom-page-tab">
                                            @if (Model.HasPermission(Feature.StudentEnum.FindAttendance.ToString()))
                                            {
                                                <li class="active" onclick="renderStudentAttendance()">
                                                    <a href="#tab_attendance" data-toggle="tab">
                                                        <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewStudent.Attendance"]</h5>
                                                    </a>
                                                </li>
                                            }
                                            <li>
                                                <a href="#tab_markSheet" data-toggle="tab" onclick="renderTermTestMarks()">
                                                  <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewStudent.MarkSheet"]</h5>
                                                </a>
                                            </li>
                                            <li>
                                                <a href="#tab_classTestMark" onclick="renderStudentClassTestMark()" data-toggle="tab">
                                                  <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewStudent.ClassTestMarkSheet"]</h5>
                                                </a>
                                            </li>
                                            <li>
                                                <a href="#tab_resultSheet" data-toggle="tab" onclick="renderStudentResultSheet()">
                                                  <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewStudent.ResultSheet"]</h5>
                                                </a>
                                            </li>
                                            @if (Model.HasPermission(Feature.StudentEnum.FindContactInfo.ToString()))
                                            {
                                                <li>
                                                    <a href="#tab_personalInfo" data-toggle="tab">
                                                        <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewStudent.PersonalInfo"]</h5>
                                                    </a>
                                                </li>
                                            }
                                            @if (Model.HasPermission(Feature.StudentEnum.FindContactPerson.ToString()))
                                            {
                                                <li>
                                                    <a href="#tab_contactPerson" data-toggle="tab" onclick="renderStudentContactPersons()">
                                                        <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewStudent.ContactPerson"]</h5>
                                                    </a>
                                                </li>
                                            }
                                            @if (Model.HasPermission(Feature.StudentEnum.ViewAddress.ToString()))
                                            {
                                                <li>
                                                    <a href="#tab_address" data-toggle="tab" onclick="renderStudentAddress()">
                                                        <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewStudent.Address"]</h5>
                                                    </a>
                                                </li>
                                            }
                                        </ul>

                                    </div>
                                    <div class="portlet-body">
                                        <!--BEGIN TABS-->
                                        <div class="tab-content">
                                            @if (Model.HasPermission(Feature.StudentEnum.FindContactInfo.ToString()))
                                            {
                                                <div class="tab-pane" id="tab_personalInfo">
                                                    <div style="min-height: 337px;">
                                                        <div class="row-fluid">
                                                            <div class="col-md-3">
                                                                <div class="uppercase profile-stat-title">
                                                                    @Model.BirthDate.ToString("dd MMMM, yyyy")
                                                                </div>
                                                            </div>
                                                            <div class="col-md-3">
                                                                <div class="uppercase profile-stat-title">
                                                                    @Html.DisplayFor(model => model.Email)
                                                                </div>
                                                            </div>
                                                            <div class="col-md-3">
                                                                <div class="uppercase profile-stat-title">
                                                                    @Html.DisplayFor(model => model.MobileNo)
                                                                </div>
                                                            </div>
                                                            <div class="col-md-3">
                                                                <div class="uppercase profile-stat-title">
                                                                    @Html.DisplayFor(model => model.Status)
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="clearfix"></div>
                                                        <div class="row-fluid">
                                                            <div class="col-md-3">
                                                                <div class="uppercase profile-stat-text">
                                                                    @Localizer["ViewStudent.BirthDate"]
                                                                </div>
                                                            </div>
                                                            <div class="col-md-3">
                                                                <div class="uppercase profile-stat-text">
                                                                    @Localizer["ViewStudent.Email"]
                                                                </div>
                                                            </div>
                                                            <div class="col-md-3">
                                                                <div class="uppercase profile-stat-text">
                                                                    @Localizer["ViewStudent.MobileNo"]
                                                                </div>
                                                            </div>
                                                            <div class="col-md-3">
                                                                <div class="uppercase profile-stat-text">
                                                                    @Localizer["ViewStudent.Status"]
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="clearfix"></div>
                                                        <hr />
                                                    </div>
                                                </div>
                                            }
                                            @if (Model.HasPermission(Feature.StudentEnum.FindContactPerson.ToString()))
                                            {
                                                <div class="tab-pane" id="tab_contactPerson">
                                                    <div style="min-height: 337px;" id="studentContactPersons">
                                                       
                                                    </div>
                                                </div>
                                            }
                                            @{
                                                <div class="tab-pane" id="tab_resultSheet">
                                                  <div style="height: 337px;" id="termTestResultSheet">
                                                    
                                                  </div>
                                                </div>
                                            }
                                            <div class="tab-pane" id="tab_markSheet">
                                                <div style="height: 337px;" id="termTestMarkSheet">
                                                    
                                                </div>
                                            </div>
                                            <div class="tab-pane" id="tab_classTestMark">
                                                <div style="height: 337px;" id="ctMarkSheet">

                                                </div>
                                            </div>
                                            @if (Model.HasPermission(Feature.StudentEnum.FindAttendance.ToString()))
                                            {
                                                <div class="tab-pane active" id="tab_attendance">
                                                    <div style="min-height: 337px">
                                                        <div class="row-fluid col-md-12 zero-padding-row">
                                                            <div class="col-md-5">
                                                                <div class="form-group">
                                                                    <div class="col-md-4">
                                                                        <label>Start Date</label><span class="required">*</span>
                                                                    </div>
                                                                    <div class="col-md-8">
                                                                    
                                                                            <input type="text" class="form-control datepicker"  name="AttendanceStartDate" id="AttendanceStartDate">
                                                                           
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <div class="col-md-5">
                                                                <div class="form-group">
                                                                    <div class="col-md-4">
                                                                        <label>End Date</label><span class="required">*</span>
                                                                    </div>
                                                                    <div class="col-md-8">
                                                                        
                                                                            <input type="text" class="form-control datepicker"  name="AttendanceEndDate" id="AttendanceEndDate">
                                                                           
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <div class="col-md-2">
                                                                <div class="form-group">
                                                                    <div class="col-md-8">
                                                                        <button type="button" onclick="searchStudentAttendanceClicked()" class="btn custom-btn custom-cancel-btn pull-right">Search</button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div>
                                                            <table class="table table-striped table-hover">
                                                                <thead>
                                                                <tr>
                                                                    <th>Date</th>
                                                                    <th>InTime</th>
                                                                    <th>OutTime</th>
                                                                    <th>Status</th>
                                                                    <th>Action</th>
                                                                </tr>
                                                                </thead>
                                                                <tbody id="studentAttendanceTable">

                                                                </tbody>
                                                            </table>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            @if (Model.HasPermission(Feature.StudentEnum.ViewAddress.ToString()))
                                            {
                                                <div class="tab-pane" id="tab_address">
                                                    <div style="height: 337px;" id="studentAddress">
                                                      
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                        <!--END TABS-->
                                    </div>
                                </div>
                                <!-- END PORTLET -->
                            </div>
                        </div>

                    </div>
                    <!-- END PROFILE CONTENT -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/assets/global/scripts/Student/studentView.js" type="text/javascript"></script>
    <script src="~/assets/global/scripts/Student/studentAttendance.js" type="text/javascript"></script>
    <script>
        function renderStudentClassTestMark() {

            $("#ctMarkSheet").load("/Student/ShowStudentClassTestMark?branchMediumId=" + @Model.BranchMediumId, function () {
                configTable('#sample_2');
                $("#ctSessionDropDown").change(function() {
                    $.ajax({
                        type: "POST",
                        url:"/Student/GetExamTerms?sessionId="+ $("#ctSessionDropDown").val() +
                            "&branchMediumId=@Model.BranchMediumId",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function(response) {
                            var ctTermDropDown = $("#ctTermDropDown");
                            ctTermDropDown.children('option:not(:first)').remove();
                            jQuery.each(response,
                                function(index, item) {
                                    var dropdownItem = new Option(item.ExamTermName, item.ExamTermId);
                                    ctTermDropDown.append(dropdownItem);
                                });
                            $("#ctMarksTableBody").empty();
                        },
                        failure: function(response) {
                            alert("Failure..! Could not Fetch Data using Ajax.");
                        },
                        error: function(response) {
                            alert("Error..! Could not Fetch Data using Ajax.");
                        }
                    });
                });

                $("#ctTermDropDown").change(function() {
                    $.ajax({
                        type: "POST",
                        url:"/Student/GetClassTestMarks?studentId=@Model.Id"+
                            "&termId=" + $("#ctTermDropDown").val(),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function(response) {
                            ShowClassTestMarks(response);
                        },
                        failure: function(response) {
                            alert("Failure..! Could not Fetch Data using Ajax.");
                        },
                        error: function(response) {
                            alert("Error..! Could not Fetch Data using Ajax.");
                        }
                    });
                });

            });
            
        }

        function ShowClassTestMarks(termMarks) {
            $("#ctMarksTableBody").empty();
            var rows = "";

            $('#ctClassName').val('@Model.ClassName');
            $('#ctRoll').val('@Model.Roll');
            jQuery.each(termMarks.ClassTestMarks, function (index, item) {
                rows += "<tr>" +
                    "<td>" +
                    item.SubjectName +
                    "</td>" +
                    "<td>" +
                    item.ExamType +
                    "</td>" +
                    "<td>" +
                    item.FullMarks +
                    "</td>" +
                    "<td>" +
                    item.ObtainedMarks +
                    "</td>" +
                    "<tr>";
            });
            $("#ctMarksTableBody").append(rows);
        }

        function renderStudentAddress() {
            $("#studentAddress").load(
                "/Student/LoadStudentAddressPartialView?studentId=" + $('#studentId').val(),
                function() {

                }); 
        }
        
        function renderStudentContactPersons() {
            $("#studentContactPersons").load(
                "/Student/LoadStudentContactPersons?studentId=" + $('#studentId').val(),
                function() {

                }); 
        }
        
        function renderTermTestMarks() {
            $("#termTestMarkSheet").load(
                "/Student/LoadTermTestMarksPartialView?branchMediumId=" +
                $('#branchMediumId').val() +
                "&studentId=" +
                $('#studentId').val(),
                function() {
                    loadTermTestMarksTabScripts();
                    configTable('#sample_3');
                });
        }

        function renderStudentResultSheet() {
            $("#termTestResultSheet").load(
                "/Student/LoadTermTestResultSheetPartialView?branchMediumId=" +
                $('#branchMediumId').val() +
                "&studentId=" +
                $('#studentId').val(),
                function() {
                    loadResultSheetTabScripts();
                    configTable('#sample_5');
                }); 
        }

        function loadResultSheetTabScripts() {
            $("#resultSheetSessionDropDown").change(function() {
                $.ajax({
                    type: "POST",
                    url:"/Student/GetExamTerms?sessionId="+ $("#resultSheetSessionDropDown").val() +
                        "&branchMediumId="+ $("#branchMediumId").val(),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function(response) {
                        populateExamTermDropDown(response);
                        $("#gradeSheetTableBody").empty();
                    },
                    failure: function(response) {
                        alert("Failure..! Could not Fetch Data using Ajax.");
                    },
                    error: function(response) {
                        alert("Error..! Could not Fetch Data using Ajax.");
                    }
                });
            });
            function populateExamTermDropDown(examTerms){
                var resultSheetExamTermDropDown = $("#resultSheetExamTermDropDown");
                resultSheetExamTermDropDown.children('option:not(:first)').remove();
                jQuery.each(examTerms,
                    function(index, item) {
                        var dropdownItem = new Option(item.ExamTermName, item.ExamTermId);
                        resultSheetExamTermDropDown.append(dropdownItem);
                    });
            }
            $("#resultSheetExamTermDropDown").change(function() {
                $.ajax({
                    type: "POST",
                    url:"/Student/GetTermResultSheet?sessionId="+ $("#resultSheetSessionDropDown").val() +
                        "&examTermId="+ $("#resultSheetExamTermDropDown").val() +
                        "&studentId=" + $("#studentId").val(),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function(response) {
                        populateResultSheetTable(response);
                    },
                    failure: function(response) {
                        alert("Failure..! Could not Fetch Data using Ajax.");
                    },
                    error: function(response) {
                        alert("Error..! Could not Fetch Data using Ajax.");
                    }
                });
            });
            function populateResultSheetTable(termResult){
                $("#gradeSheetTableBody").empty();
                var rows = "";

                jQuery.each(termResult.SubjectWiseResults, function (index, item) {
                    rows += "<tr>" +
                        "<td>" +
                        item.SubjectName +
                        "</td>" +
                        "<td>" +
                        item.SubjectiveMark +
                        "</td>" +
                        "<td>" +
                        item.ObjectiveMark +
                        "</td>" +
                        "<td>" +
                        item.PracticalMark +
                        "</td>" +
                        "<td>" +
                        item.ClassTestMark +
                        "</td>" +
                        "<td>" +
                        item.GradeLetter +
                        "</td>" +
                        "<td>" +
                        item.GradePoint +
                        "</td>" +
                        "<tr>";
                });
                $("#gradeSheetTableBody").append(rows) ;
            }
        }
        
        function loadTermTestMarksTabScripts() {
             $("#sessionDropDown").change(function() {
                        $.ajax({
                            type: "POST",
                            url:"/Student/GetExamTerms?sessionId="+ $("#sessionDropDown").val() +
                                "&branchMediumId=@Model.BranchMediumId",
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function(response) {
                                PopulateExamTermDropDown(response);
                                $("#marksTableBody").empty();
                            },
                            failure: function(response) {
                                alert("Failure..! Could not Fetch Data using Ajax.");
                            },
                            error: function(response) {
                                alert("Error..! Could not Fetch Data using Ajax.");
                            }
                        });
                    });
            
                    function PopulateExamTermDropDown(examTerms){
                        var examTermDropDown = $("#examTermDropDown");
                        examTermDropDown.children('option:not(:first)').remove();
                        jQuery.each(examTerms,
                            function(index, item) {
                                var dropdownItem = new Option(item.ExamTermName, item.ExamTermId);
                                examTermDropDown.append(dropdownItem);
                            });
                    }
            
                    $("#examTermDropDown").change(function() {
                        $.ajax({
                            type: "POST",
                            url:"/Student/GetExamTermMarks?studentId=@Model.Id"+
                                "&examTermId=" + $("#examTermDropDown").val() +
                                "&sectionId=@Model.SectionId" + "&classId=@Model.ClassId",
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function(response) {
                                ShowMarks(response);
                            },
                            failure: function(response) {
                                alert("Failure..! Could not Fetch Data using Ajax.");
                            },
                            error: function(response) {
                                alert("Error..! Could not Fetch Data using Ajax.");
                            }
                        });
                    });
            
                    function ShowMarks(termMarks) {
                        $("#marksTableBody").empty();
                        var rows = "";

                        jQuery.each(termMarks.TermTestMarks, function (index, item) {
                            var remarks = "";
                            if (item.MarkDetails.Remarks != null) {
                                remarks = item.MarkDetails.Remarks;
                            }
                            rows += "<tr>" +
                                "<td>" +
                                item.SubjectName +
                                "</td>" +
                                "<td>" +
                                item.ExamType +
                                "</td>" +
                                "<td>" +
                                item.PassMarks +
                                "</td>" +
                                "<td>" +
                                item.FullMarks +
                                "</td>" +
                                "<td>" +
                                item.MarkDetails.ObtainedMarks +
                                "</td>" +
                                "<td>" +
                                item.MarkDetails.GraceMarks +
                                "</td>" +
                                "<td>" +
                                remarks +
                                "</td>" +
                                "<tr>";
                        });
                        $("#marksTableBody").append(rows);
                    }
                 
        }

    </script>
}
