@using Microsoft.AspNetCore.Mvc.Localization
@using SinePulse.EMS.Domain.Features
@model SinePulse.EMS.Site.Models.TermViewModel
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "ViewTerm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="page-container">
<div class="page-content-wrapper">
<div class="page-content">
<!-- END PAGE HEADER-->
<!-- BEGIN PAGE CONTENT-->
<div class="row">
<div class="col-md-12">
<!-- BEGIN PROFILE SIDEBAR -->
<div class="profile-sidebar">
    <!-- PORTLET MAIN -->
    <div class="portlet light profile-sidebar-portlet">
        <input id="termId" type="hidden" asp-for="@Model.TermId" runat="server" />
        <!-- SIDEBAR USERPIC -->
        <div class="profile-userpic">
            <a href="#"><img src="../../img/school.png" class="img-responsive" alt=""></a>
        </div>
        <!-- END SIDEBAR USERPIC -->
        <!-- SIDEBAR USER TITLE -->
        <div class="profile-usertitle-name small-title">
            @Html.DisplayFor(model => Model.TermName)
            <div class="profile-stat-text">
                @Localizer["ViewTerm.TermName"]
            </div>
        </div>
        <hr />
        <!-- END SIDEBAR USER TITLE -->

        <div class="profile-usertitle-name">
            @Html.DisplayFor(model => Model.BranchMediumData.InstituteName)
        </div>
        <div class="profile-stat-text">
            @Localizer["ViewTerm.Institute"]
        </div>
        <hr />
        <div class="profile-usertitle-name">
            @Model.BranchMediumData.BranchName
        </div>
        <div class="profile-stat-text">
            @Localizer["ViewTerm.Branch"]
        </div>
        <hr />
        <div class="profile-usertitle-name">
            @if (Model.HasPermission(Feature.BranchMediumEnum.ViewBranchMedium.ToString()))
            {
                <a href="/BranchMedium/ViewBranchMedium?branchMediumId=@Model.BranchMediumData.Id">
                    @Html.DisplayFor(model => model.BranchMediumData.MediumName)
                </a>
            }
            else
            {
                @Html.DisplayFor(model => model.BranchMediumData.MediumName)
            }
        </div>
        <div class="profile-stat-text">
            @Localizer["ViewTerm.Medium"]
        </div>
        <hr />
        <div class="profile-usertitle-name">
            Morning Shift
        </div>
        <div class="profile-stat-text">
            Shift
        </div>
        <hr />
        <div class="profile-usertitle-name">
            @Model.SessionData.SessionText
        </div>
        <div class="profile-stat-text">
            @Localizer["ViewTerm.Session"]
        </div>
        <hr />
        <br />
        <div class="row-fluid">

            <div class="col-md-5">
                <div class="profile-usertitle-name">
                    @Model.StartDate.ToString("dd MMMM, yyyy")
                </div>

            </div>
            <div class="col-md-5">
                <div class="profile-usertitle-name">
                    @Model.EndDate.ToString("dd MMMM, yyyy")
                </div>

            </div>
            <div class="col-md-2">
                <div class="profile-usertitle-name">
                    @Model.Status
                </div>

            </div>
        </div>
        <div class="row-fluid">
            <div class="col-md-5">
                <div class="profile-stat-text">
                    @Localizer["ViewTerm.StartDate"]
                </div>
            </div>
            <div class="col-md-5">
                <div class="profile-stat-text">
                    @Localizer["ViewTerm.EndDate"]
                </div>
            </div>
            <div class="col-md-2">
                <div class="profile-stat-text">
                    @Localizer["ViewTerm.Status"]
                </div>
            </div>
        </div>
    </div>
    <!-- END PORTLET MAIN -->
</div>
<!-- END BEGIN PROFILE SIDEBAR -->
<!-- BEGIN PROFILE CONTENT -->
<div class="profile-content">
    <div class="row">
        <div class="col-md-12">
            <!-- BEGIN PORTLET -->
            <div class="portlet light">
                <div class="portlet-title tabbable-line">
                    <div class="page-toolbar custom-page-menu-bar">
                        <div class="btn-group">
                            <ul style="padding:0px;">
                                <li class="custom-page-menu dropdown primary-menu-item-li">
                                    <a href="#" class="show-dropdown-on-hover" data-toggle="custom-page-menu">
                                        <button type="button" class="btn btn-fit-height dark-bg dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" data-delay="100" data-close-others="true">
                                            <i class="fa fa-bars"></i>
                                        </button>
                                    </a>
                                    <ul class="dropdown-menu light-arrow-only">
                                        @if (Model.HasPermission(Feature.ExaminationEnum.AddExamConfiguration.ToString()))
                                        {
                                            <li><a href="/ExamConfiguration/AddExamConfiguration?termId=@Model.TermId">@Localizer["ViewTerm.ConfigureExam"]</a></li>
                                        }
                                        @if (Model.HasPermission(Feature.ExaminationEnum.AddExamRoutine.ToString()))
                                        {
                                            <li><a href="/TermTest/AddTermTest?termId=@Model.TermId">@Localizer["ViewTerm.AddTermTest"]</a></li>
                                        }
                                        @if (Model.HasPermission(Feature.ExaminationEnum.PrepareResult.ToString()))
                                        {
                                            <li><a href="#">@Localizer["ViewTerm.PrepareResult"]</a></li>
                                        }
                                    </ul>
                                </li>
                            </ul>
                        </div>
                    </div>
                    @{
                        var addMarksActive = "";
                        var addMarksPaneActive = "tab-pane";
                        var defaultActive = "active";
                        var defaultPaneActive = "tab-pane active";

                        if (Model.AddTermTestMarksViewModel.ActiveTestMarksAddTab)
                        {
                            addMarksActive = "active";
                            addMarksPaneActive = "tab-pane active";
                            defaultActive = "";
                            defaultPaneActive = "tab-pane";
                        }
                    }
                    <ul class="nav nav-tabs custom-page-tab">
                        @if (Model.HasPermission(Feature.ExaminationEnum.FindExamConfiguration.ToString()))
                        {
                            <li class="@defaultActive">
                                <a href="#examType" data-toggle="tab">
                                    <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewTerm.ExamConfiguration"]</h5>
                                </a>
                            </li>
                        }
                        @if (Model.HasPermission(Feature.ExaminationEnum.FindExamRoutine.ToString()))
                        {
                            <li>
                                <a href="#tab_examRoutine" onclick="renderTermTestDefault()" data-toggle="tab">
                                    <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewTerm.TermTest"]</h5>
                                </a>
                            </li>
                        }
                        <li class="@addMarksActive">
                            <a href="#tab_termTestMarks" data-toggle="tab">
                                <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewTerm.MarksEntry"]</h5>
                            </a>
                        </li>

                        <li class="@addMarksActive">
                            <a href="#tab_seatPlan" onclick="showSeatPlan()" data-toggle="tab">
                              <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewTerm.SeatPlan"]</h5>
                            </a>
                        </li>
                    </ul>

                </div>
                <div class="portlet-body">
                    <!--BEGIN TABS-->
                    <div class="tab-content">
                        @if (Model.HasPermission(Feature.ExaminationEnum.FindExamRoutine.ToString()))
                        {
                            <div class="tab-pane" id="tab_examRoutine">
                                <div style="min-height: 320px;">
                                    <div class="col-md-2 pull-right">
                                        <div class="col-md-1 glyphicon glyphicon-th-list  pull-right" onclick="renderTermTestTable()"></div>
                                        <div class="col-md-1 glyphicon glyphicon-calendar pull-right" onclick="showTermTestCalender()"></div>
                                    </div>
                                    <br/>
                                    <div id="examRoutineCalenderView"></div>
                                    <div id="examRoutineList"></div>
                                </div>

                            </div>
                        }
                        @if (Model.HasPermission(Feature.ExaminationEnum.FindExamConfiguration.ToString()))
                        {
                            <div class="@defaultPaneActive" id="examType">
                                <div style="min-height: 320px;">
                                    <table class="table table-striped table-hover" id="sample_1">
                                        <thead class="filterCriteria">
                                            <tr class="uppercase">
                                                <th>@Localizer["ViewTerm.Class"]</th>
                                                <th>@Localizer["ViewTerm.Group"]</th>
                                                <th>@Localizer["ViewTerm.Subject"]</th>
                                                <th>@Localizer["ViewTerm.ClassPercentage"]</th>
                                                <th>@Localizer["ViewTerm.SubjectiveFullMark"]</th>
                                                <th>@Localizer["ViewTerm.SubjectivePassMark"]</th>
                                                <th>@Localizer["ViewTerm.ObjectiveFullMark"]</th>
                                                <th>@Localizer["ViewTerm.ObjectivePassMark"]</th>
                                                <th>@Localizer["ViewTerm.PracticalFullMark"]</th>
                                                <th>@Localizer["ViewTerm.PracticalPassMark"]</th>
                                                <th>@Localizer["ViewTerm.Action"]</th>
                                            </tr>
                                        </thead>
                                        @{
                                            if (Model.ExamConfigurations.Any())
                                            {
                                                foreach (var examType in Model.ExamConfigurations)
                                                {
                                                    <tr>
                                                        <td>@Html.DisplayFor(model => examType.Class.ClassName)</td>
                                                        <td></td>
                                                        <td>@Html.DisplayFor(model => examType.Subject.SubjectName)</td>
                                                        <td>@Html.DisplayFor(model => examType.ClassTestPercentage)</td>
                                                        <td>@Html.DisplayFor(model => examType.SubjectiveFullMark)</td>
                                                        <td>@Html.DisplayFor(model => examType.SubjectivePassMark)</td>
                                                        <td>@Html.DisplayFor(model => examType.ObjectiveFullMark)</td>
                                                        <td>@Html.DisplayFor(model => examType.ObjectivePassMark)</td>
                                                        <td>@Html.DisplayFor(model => examType.PracticalFullMark)</td>
                                                        <td>@Html.DisplayFor(model => examType.PracticalPassMark)</td>


                                                        <td>
                                                            @if (Model.HasPermission(Feature.ExaminationEnum.EditExamConfiguration.ToString()))
                                                            {

                                                                <a href="/ExamConfiguration/UpdateExamConfiguration?examConfigurationId=@examType.Id" class="action-link"><i class="fa fa-edit action-icon"></i></a>
                                                            }
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        }
                                    </table>
                                </div>
                            </div>
                        }
                        <div class="@addMarksPaneActive" id="tab_termTestMarks">
                            <div style="min-height: 320px;" >
                                @{
                                    Model.AddTermTestMarksViewModel.BranchMediumId = Model.BranchMediumData.Id;
                                    Model.AddTermTestMarksViewModel.TermId = Model.TermId;
                                }

                                @Html.Partial("~/Views/Term/AddTermTestMarks.cshtml", Model.AddTermTestMarksViewModel)
                            </div>
                        </div>
                        <div class="@addMarksPaneActive" id="tab_seatPlan">
                            <div style="min-height: 320px;" id="showSeatPlan">
                                <div>
                                    <i class="fa fa-circle-o-notch fa-spin" style="font-size: 48px;color: #17a2b8!important"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--END TABS-->
                </div>
            </div>
            <!-- END PORTLET -->
        </div>
    </div>

</div>
<!-- END PROFILE CONTENT -->
</div>
</div>
</div>
</div>


</div>

@section Scripts
{
    <script>
        function renderTermTestDefault() {
            showTermTestCalender();
        }

        function showSeatPlan() {
            $("#showSeatPlan").load(
                "/SeatPlan/ShowSeatPlanList?termId=" + $('#termId').val(),
                function () {
                    configTable('#sample_6');
                });
        }
        function renderTermTestTable() {
            $('#examRoutineCalenderView').hide();
            $('#examRoutineList').empty();
            $("#examRoutineList").load(
                "/TermTest/GetAllClassRoutineEventsForList?termId=" + $('#termId').val(),
                function() {
                    configTable('#sample_2');
                });
        }

        function showTermTestCalender() {
            $('#examRoutineCalenderView').show();
            $('#examRoutineList').empty();
            var date = new Date();
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            var day = date.getDate();
            var termId = $('#termId').val();
            var eventList = [];
            $.ajax({
                type: "GET",
                url: "/TermTest/GetAllClassRoutineEvents?termId=" +
                    termId +
                    "&year=" +
                    year +
                    "&month=" +
                    month +
                    "&day=" +
                    day,
                dataType: "JSON",
                contentType: "application/json;charset=utf-8",
                success: function(data) {
                    if (data.length > 0) {
                        eventList = [];
                        jQuery.each(data,
                            function(index, item) {
                                var model = {
                                    start: item.start,
                                    end: item.end,
                                    color: item.color,
                                    title: item.title
                                };
                                eventList.push(model);
                            });
                        console.log(eventList);

                    }

                    $('#examRoutineCalenderView').fullCalendar({
                        date: date,
                        editable: false,
                        eventLimit: false, // allow "more" link when too many events
                        events: function(start, end, timezone, callback) {
                            callback(eventList);
                            //alert(new Date(end));
                            year = new Date(start).getFullYear();
                            month = new Date(start).getMonth() + 1;
                            day = new Date(start).getDate();
                            $.ajax({
                                type: "GET",
                                url: "/TermTest/GetAllClassRoutineEvents?termId=" +
                                    termId +
                                    "&year=" +
                                    year +
                                    "&month=" +
                                    month +
                                    "&day=" +
                                    day,
                                dataType: "JSON",
                                contentType: "application/json;charset=utf-8",
                                success: function(data) {
                                    if (data.length > 0) {
                                        eventList = [];
                                        jQuery.each(data,
                                            function(index, item) {
                                                var model = {
                                                    start: item.start,
                                                    end: item.end,
                                                    color: item.color,
                                                    title: item.title
                                                };
                                                eventList.push(model);
                                            });
                                        console.log(eventList);

                                    }
                                    $('#examRoutineCalenderView').fullCalendar('removeEvents');
                                    $('#examRoutineCalenderView').fullCalendar('addEventSource', eventList);
                                    $('#examRoutineCalenderView').fullCalendar('rerenderEvents');
                                },
                                error: function(a, b, c) {

                                }
                            });
                        },
                        defaultView: 'agendaDay',
                        eventRender: function(event, element) {
                            var limit = 10;
                            if (event.title.length > limit) {
                                element.find('.fc-title').text(event.title.substr(0, limit) + '...');
                                console.log(element.find('.fc-title'));
                                element.attr("title", event.title);
                            }
                        },
                        viewRender: function(view, element) {

                        }
                    });
                },
                error: function(a, b, c) {

                }
            });
        }

        $(document).ready(function() {
            $.ajax({
                type: "POST",
                url: "/Mark/FilterTermTestAddMarkFields?termId=@Model.TermId&branchMediumId=@Model.BranchMediumData.Id",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    populateClassDropDown(response.Classes);
                    populateGroupDropDown(response.Groups);
                    populateExamTypeDropDown(response.Groups);
                    populateSubjectDropDown(response.Subjects);
                    populateSectionDropDown(response.Sections);
                    //loadStudents();
                },
                failure: function(response) {
                    alert("Failure..! Could not Fetch Data using Ajax.");
                },
                error: function(response) {
                    alert("Error..! Could not Fetch Data using Ajax.");
                }
            });
        });

        $("#classDropDown").change(function() {
            $.ajax({
                type: "POST",
                url:
                    "/Mark/FilterTermTestAddMarkFields?termId=@Model.TermId&branchMediumId=@Model.BranchMediumData.Id&classId=" +
                        $("#classDropDown").val(),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    populateGroupDropDown(response.Groups);
                    populateSectionDropDown(response.Sections);
                    //loadStudents();
                },
                failure: function(response) {
                    alert("Failure..! Could not Fetch Data using Ajax.");
                },
                error: function(response) {
                    alert("Error..! Could not Fetch Data using Ajax.");
                }
            });
        });
        $("#classDropDown").change(function() {
            $.ajax({
                type: "POST",
                url: "/Mark/GetTermTestAddMarkObjects?termId=@Model.TermId" +
                    "&branchMediumId=@Model.BranchMediumData.Id" +
                    "&classId=" +
                    $("#classDropDown").val() +
                    "&group=" +
                    $("#groupDropDown").val() +
                    "&subjectId=" +
                    $("#subjectDropDown").val() +
                    "&examType=" +
                    $("#examTypeDropDown").val() +
                    "&sectionId=" +
                    $("#sectionDropDown").val(),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    $("#accountHeadsTableBody").empty();
                    populateMarksAddTable(response);
                },
                failure: function(response) {
                    alert("Failure..! Could not Fetch Data using Ajax.");
                },
                error: function(response) {
                    alert("Error..! Could not Fetch Data using Ajax.");
                }
            });
        });

        $("#groupDropDown").change(function() {
            $.ajax({
                type: "POST",
                url: "/Mark/FilterTermTestAddMarkFields?termId=@Model.TermId" +
                    "&branchMediumId=@Model.BranchMediumData.Id" +
                    "&classId=" +
                    $("#classDropDown").val() +
                    "&group=" +
                    $("#groupDropDown").val(),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    populateSubjectDropDown(response.Subjects);
                    populateSectionDropDown(response.Sections);
                    //loadStudents();
                },
                failure: function(response) {
                    alert("Failure..! Could not Fetch Data using Ajax.");
                },
                error: function(response) {
                    alert("Error..! Could not Fetch Data using Ajax.");
                }
            });
        });
        $("#groupDropDown").change(function() {
            $.ajax({
                type: "POST",
                url: "/Mark/GetTermTestAddMarkObjects?termId=@Model.TermId" +
                    "&branchMediumId=@Model.BranchMediumData.Id" +
                    "&classId=" +
                    $("#classDropDown").val() +
                    "&group=" +
                    $("#groupDropDown").val() +
                    "&subjectId=" +
                    $("#subjectDropDown").val() +
                    "&examType=" +
                    $("#examTypeDropDown").val() +
                    "&sectionId=" +
                    $("#sectionDropDown").val(),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    $("#accountHeadsTableBody").empty();
                    populateMarksAddTable(response);
                },
                failure: function(response) {
                    alert("Failure..! Could not Fetch Data using Ajax.");
                },
                error: function(response) {
                    alert("Error..! Could not Fetch Data using Ajax.");
                }
            });
        });

        $("#subjectDropDown").change(function() {
            $.ajax({
                type: "POST",
                url: "/Mark/FilterTermTestAddMarkFields?termId=@Model.TermId" +
                    "&branchMediumId=@Model.BranchMediumData.Id" +
                    "&classId=" +
                    $("#classDropDown").val() +
                    "&group=" +
                    $("#groupDropDown").val() +
                    "&subjectId=" +
                    $("#subjectDropDown").val(),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    populateExamTypeDropDown(response.ExamTypes);
                },
                failure: function(response) {
                    alert("Failure..! Could not Fetch Data using Ajax.");
                },
                error: function(response) {
                    alert("Error..! Could not Fetch Data using Ajax.");
                }
            });
        });

        $("#subjectDropDown").change(function() {
            $.ajax({
                type: "POST",
                url: "/Mark/GetTermTestAddMarkObjects?termId=@Model.TermId" +
                    "&branchMediumId=@Model.BranchMediumData.Id" +
                    "&classId=" +
                    $("#classDropDown").val() +
                    "&group=" +
                    $("#groupDropDown").val() +
                    "&subjectId=" +
                    $("#subjectDropDown").val() +
                    "&examType=" +
                    $("#examTypeDropDown").val() +
                    "&sectionId=" +
                    $("#sectionDropDown").val(),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    $("#accountHeadsTableBody").empty();
                    populateMarksAddTable(response);
                },
                failure: function(response) {
                    alert("Failure..! Could not Fetch Data using Ajax.");
                },
                error: function(response) {
                    alert("Error..! Could not Fetch Data using Ajax.");
                }
            });
        });

        function populateClassDropDown(classes) {
            var classDropDown = $("#classDropDown");
            classDropDown.children('option:not(:first)').remove();
            jQuery.each(classes,
                function(index, item) {
                    var dropdownItem = new Option(item.ClassName, item.ClassId);
                    classDropDown.append(dropdownItem);
                });
        }

        function populateGroupDropDown(groups) {
            var groupDropDown = $("#groupDropDown");
            groupDropDown.children('option:not(:first)').remove();
            jQuery.each(groups,
                function(index, item) {
                    var dropdownItem = new Option(item.GroupName, item.GroupId);
                    groupDropDown.append(dropdownItem);
                });
        }

        function populateExamTypeDropDown(examTypes) {
            var examTypeDropDown = $("#examTypeDropDown");
            examTypeDropDown.children('option:not(:first)').remove();
            jQuery.each(examTypes,
                function(index, item) {
                    var dropdownItem = new Option(item.ExamTypeName, item.ExamTypeId);
                    examTypeDropDown.append(dropdownItem);
                });
        }

        function populateSubjectDropDown(subjects) {
            var subjectDropDown = $("#subjectDropDown");
            subjectDropDown.children('option:not(:first)').remove();
            jQuery.each(subjects,
                function(index, item) {
                    var dropdownItem = new Option(item.SubjectName, item.SubjectId);
                    subjectDropDown.append(dropdownItem);
                });
        }

        function populateSectionDropDown(sections) {
            var sectionDropDown = $("#sectionDropDown");
            sectionDropDown.children('option:not(:first)').remove();
            jQuery.each(sections,
                function(index, item) {
                    var dropdownItem = new Option(item.SectionName, item.SectionId);
                    sectionDropDown.append(dropdownItem);
                });
        }

        $("#sectionDropDown").change(function() {
            $.ajax({
                type: "POST",
                url: "/Mark/GetTermTestAddMarkObjects?termId=@Model.TermId" +
                    "&branchMediumId=@Model.BranchMediumData.Id" +
                    "&classId=" +
                    $("#classDropDown").val() +
                    "&group=" +
                    $("#groupDropDown").val() +
                    "&subjectId=" +
                    $("#subjectDropDown").val() +
                    "&examType=" +
                    $("#examTypeDropDown").val() +
                    "&sectionId=" +
                    $("#sectionDropDown").val(),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    $("#accountHeadsTableBody").empty();
                    populateMarksAddTable(response);
                },
                failure: function(response) {
                    alert("Failure..! Could not Fetch Data using Ajax.");
                },
                error: function(response) {
                    alert("Error..! Could not Fetch Data using Ajax.");
                }
            });
        });

        $("#examTypeDropDown").change(function() {
            $.ajax({
                type: "POST",
                url: "/Mark/GetTermTestAddMarkObjects?termId=@Model.TermId" +
                    "&branchMediumId=@Model.BranchMediumData.Id" +
                    "&classId=" +
                    $("#classDropDown").val() +
                    "&group=" +
                    $("#groupDropDown").val() +
                    "&subjectId=" +
                    $("#subjectDropDown").val() +
                    "&examType=" +
                    $("#examTypeDropDown").val() +
                    "&sectionId=" +
                    $("#sectionDropDown").val(),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    $("#accountHeadsTableBody").empty();
                    populateMarksAddTable(response);
                },
                failure: function(response) {
                    alert("Failure..! Could not Fetch Data using Ajax.");
                },
                error: function(response) {
                    alert("Error..! Could not Fetch Data using Ajax.");
                }
            });
        });

        function populateMarksAddTable(response) {
            $('#saveButton').attr('disabled', false);
            if (response.disableAddButton) {
                $('#saveButton').attr('disabled', true);
            }
            if (response.StudentMarks != undefined) {
                UpdateMark(response.StudentMarks, response.Marks, response.TermTestId, response);
            } else {
                AddMark(response.Students, response.Mark, response.TermTestId)
            }
        }

        function UpdateMark(studentMarks, marks, termTestId, response) {
            var rows = "";
            jQuery.each(studentMarks,
                function(index, item) {
                    var remarks = "";
                    if (item.Remarks != null || item.Remarks != undefined) {
                        remarks = item.Remarks;
                    }
                    rows += "<tr>" +
                        "<td>" +
                        "<input type='number' hidden name='StudentSectionIds' value='" +
                        item.StudentSectionId +
                        "' >" +
                        item.StudentName +
                        "</td>" +
                        "<td>" +
                        "<input type='number' hidden name='TermTestId' value='" +
                        termTestId +
                        "' >" +
                        item.Roll +
                        "</td>" +
                        "<td>" +
                        "<input type='number' hidden name='FullMarks' value='" +
                        marks.FullMarks +
                        "'  >" +
                        marks.FullMarks +
                        "</td>" +
                        "<td>" +
                        "<input type='number' hidden name='ClassId' value='" +
                        response.ClassId +
                        "' >" +
                        "<input type='number' hidden name='SectionId' value='" +
                        response.SectionId +
                        "' >" +
                        "<input type='number' hidden name='ExamType' value='" +
                        response.ExamType +
                        "' >" +
                        "<input type='number' hidden name='Group' value='" +
                        response.Group +
                        "' >" +
                        "<input type='number' hidden name='SubjectId' value='" +
                        response.SubjectId +
                        "' >" +
                        "<input type='number' hidden name='PassMarks' value='" +
                        marks.PassMarks +
                        "' >" +
                        marks.PassMarks +
                        "</td>" +
                        "<td>" +
                        "<input name='ObtainedMarks' size='6' style='text-align: center' type='number' value=" +
                        item.ObtainedMark +
                        " />" +
                        "</td>" +
                        "<td>" +
                        '<input name="GraceMarks" size="6" style="text-align: center" type="number" value="' +
                        item.GraceMark +
                        '">' +
                        "</td>" +
                        "<td>" +
                        '<input name="RemarksArray" style="text-align: center" type="text" value="' +
                        remarks +
                        '">' +
                        "</td>" +
                        "<tr>";
                });
            $("#accountHeadsTableBody").append(rows);
        }

        function AddMark(students, mark, termTestId) {
            var rows = "";
            jQuery.each(students,
                function(index, item) {
                    rows += "<tr>" +
                        "<td>" +
                        "<input type='number' hidden name='StudentSectionIds' value='" +
                        item.StudentSectionId +
                        "' >" +
                        item.StudentName +
                        "</td>" +
                        "<td>" +
                        "<input type='number' hidden name='TermTestId' value='" +
                        termTestId +
                        "' >" +
                        item.Roll +
                        "</td>" +
                        "<td>" +
                        "<input type='number' hidden name='FullMarks' value='" +
                        mark.FullMarks +
                        "'  >" +
                        mark.FullMarks +
                        "</td>" +
                        "<td>" +
                        "<input type='number' hidden name='PassMarks' value='" +
                        mark.PassMarks +
                        "' >" +
                        mark.PassMarks +
                        "</td>" +
                        "<td>" +
                        '<input name="ObtainedMarks" size="6" style="text-align: center" type="number" value="0">' +
                        "</td>" +
                        "<td>" +
                        '<input name="GraceMarks" size="6" style="text-align: center" type="number" value="0">' +
                        "</td>" +
                        "<td>" +
                        '<input name="RemarksArray" style="text-align: center" type="text" value="">' +
                        "</td>" +
                        "<tr>";
                });
            $("#accountHeadsTableBody").append(rows);
        }

    </script>
}