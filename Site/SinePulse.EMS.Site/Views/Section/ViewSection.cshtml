@using SinePulse.EMS.Domain.Features
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@model ShowSectionViewModel
@{
    ViewData["Title"] = "ViewSection";
    Layout = "~/Views/Shared/_Layout.cshtml";
    long roomId = 0;
    if (Model.Section.Room != null)
    {
        roomId = Model.Section.Room.Id;
    }
}
<div class="page-container">
    <div class="page-content-wrapper">
        <div class="page-content">
            
            <!-- END PAGE HEADER-->
            <!-- BEGIN PAGE CONTENT-->
            <div class="row">
                <div class="col-md-12">
                    <input id="showSectionId" type="hidden" asp-for="@Model.Section.Id" runat="server" />
                    <!-- BEGIN PROFILE SIDEBAR -->
                    <div class="profile-sidebar">
                        <!-- PORTLET MAIN -->
                      <div class="portlet light profile-sidebar-portlet">
                        <!-- SIDEBAR USERPIC -->
                        <div class="profile-userpic">
                          <img src="../../img/school.png" class="img-responsive" alt="">
                        </div>
                        <!-- END SIDEBAR USERPIC -->
                        <!-- SIDEBAR USER TITLE -->
                        <div class="profile-usertitle-name small-title">
                          @Html.DisplayFor(model => model.Section.SectionName)
                          <div class="profile-stat-text">
                            @Localizer["ViewSection.Section"]
                          </div>
                        </div>
                        <hr />

                        <!-- END SIDEBAR USER TITLE -->
                        <div class="profile-usertitle-name">
                          @if (Model.HasPermission(Feature.InstituteEnum.ViewInstitute.ToString()))
                          {
                            <a href="/Institute/ViewInstitute?instituteId=@Model.Section.BranchMedium.Branch.Institute.Id">
                              @Html.DisplayFor(model => model.Section.BranchMedium.Branch.Institute.OrganisationName) (@Html.DisplayFor(model => model.Section.BranchMedium.Branch.Institute.ShortName))
                            </a>
                          }
                          else
                          {
                            @Html.DisplayFor(model => model.Section.BranchMedium.Branch.Institute.OrganisationName)
                            @Html.DisplayFor(model => model.Section.BranchMedium.Branch.Institute.ShortName)
                          }
                        </div>
                        <div class="profile-stat-text">
                          @Localizer["ViewSection.Institute"]
                        </div>
                        <hr />
                        <div class="profile-usertitle-name">
                          @if (Model.HasPermission(Feature.BranchEnum.ViewBranch.ToString()))
                          {
                            <a href="/Branch/ViewBranch?branchId=@Model.Section.BranchMedium.Branch.Id">
                              @Html.DisplayFor(model => model.Section.BranchMedium.Branch.BranchName)
                            </a>
                          }
                          else
                          {
                            @Html.DisplayFor(model => model.Section.BranchMedium.Branch.BranchName)
                          }
                        </div>
                        <div class="profile-stat-text">
                          @Localizer["ViewSection.Branch"]
                        </div>
                        <hr />
                        <div class="profile-usertitle-name">
                          @if (Model.HasPermission(Feature.BranchMediumEnum.ViewBranchMedium.ToString()))
                          {
                            <a href="/BranchMedium/ViewBranchMedium?branchMediumId=@Model.Section.BranchMedium.Id">
                              @Html.DisplayFor(model => model.Section.BranchMedium.Medium.MediumName)
                            </a>
                          }
                          else
                          {
                            @Html.DisplayFor(model => model.Section.BranchMedium.Medium.MediumName)
                          }
                        </div>
                        <div class="profile-stat-text">
                          @Localizer["ViewSection.Medium"]

                        </div>
                        <hr />
                        <div class="profile-usertitle-name">
                          @Html.DisplayFor(model => model.Section.BranchMedium.Shift.ShiftName)
                        </div>
                        <div class="profile-stat-text">
                          @Localizer["ViewSection.Shift"]
                        </div>
                        <hr />
                        <br />
                        <div class="row-fluid">
                          <div class="col-md-4">
                            <div class="profile-usertitle-name">
                              @Html.DisplayFor(model => model.Section.Class.ClassName)
                            </div>
                          </div>
                          <div class="col-md-4">
                            <div class="profile-usertitle-name">
                              @Html.DisplayFor(model => model.Section.Group)
                            </div>
                          </div>
                          <div class="col-md-4">
                            <div class="profile-usertitle-name">
                              @Html.DisplayFor(model => model.Section.Room.RoomNo)
                            </div>
                          </div>
                        </div>
                        <div class="clearfix"></div>
                        <div class="row-fluid">
                          <div class="col-md-4">
                            <div class="profile-stat-text">
                              @Localizer["ViewSection.Class"]
                            </div>
                          </div>
                          <div class="col-md-4">
                            <div class="profile-stat-text">
                              @Localizer["ViewSection.Group"]
                            </div>
                          </div>
                          <div class="col-md-4">
                            <div class="profile-stat-text">
                              @Localizer["ViewSection.Room"]
                            </div>
                          </div>
                        </div>
                      </div>
                        <!-- END PORTLET MAIN -->
                    </div>
                    <!-- END BEGIN PROFILE SIDEBAR -->
                    <!-- BEGIN PROFILE CONTENT -->
                    <div class="profile-content">
                        <div class="row">

                            <div class="col-md-12">
                                <!-- BEGIN PORTLET -->
                                <div class="portlet light">
                                    <div class="portlet-title tabbable-line">
                                        <div class="page-toolbar custom-page-menu-bar">
                                            <div class="btn-group">
                                                <ul style="padding: 0px;">

                                                    <li class="custom-page-menu dropdown primary-menu-item-li">
                                                        <a href="#" class="show-dropdown-on-hover" data-toggle="custom-page-menu">
                                                            <button type="button" class="btn btn-fit-height dark-bg dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" data-delay="100" data-close-others="true">
                                                                <i class="fa fa-bars"></i>
                                                            </button>
                                                        </a>
                                                        <ul class="dropdown-menu light-arrow-only">
                                                            @if (Model.HasPermission(Feature.SectionEnum.AddClassRoutine.ToString()))
                                                            {
                                                                <li>
                                                                    <a href="/ClassRoutine/AddClassRoutine?sectionId=@Model.Section.Id">@Localizer["ViewSection.AddClassRoutine"]</a>
                                                                </li>
                                                            }
                                                            @if (Model.HasPermission(Feature.ExaminationEnum.AddClassTest.ToString()))
                                                            {
                                                                <li>
                                                                    <a href="/ClassTest/AddClassTest?sectionId=@Model.Section.Id">@Localizer["ViewSection.AddClassTest"]</a>
                                                                </li>
                                                            }
                                                            @if (Model.HasPermission(Feature.SectionEnum.AssignOrChangeRoom.ToString()))
                                                            {
                                                                <li>
                                                                    <a href="/Section/AssignOrChangeRoomInSection?sectionId=@Model.Section.Id&roomId=@roomId">@Localizer["ViewSection.Assign/ChangeRoom"]</a>
                                                                </li>
                                                            }
                                                            <li>
                                                                <a href="/StudentPromotion/PromoteStudentOption?sectionId=@Model.Section.Id">@Localizer["ViewSection.PromoteStudent"]</a>
                                                            </li>
                                                            

                                                        </ul>
                                                    </li>

                                                </ul>

                                            </div>
                                        </div>

                                        <ul class="nav nav-tabs custom-page-tab">
                                          @if (Model.HasPermission(Feature.SectionEnum.FindClassRoutine.ToString()))
                                          {
                                            <li class="active">
                                              <a href="#tab_classRoutine" data-toggle="tab">
                                                <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewSection.ClassRoutine"]</h5>
                                              </a>
                                            </li>
                                          }
                                          @if (Model.HasPermission(Feature.ExaminationEnum.FindClassTest.ToString()))
                                          {
                                            <li>
                                              <a href="#tab_classTest" onclick="renderAddClassTestCalender()" data-toggle="tab">
                                                <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewSection.ClassTest"]</h5>
                                              </a>
                                            </li>
                                          }
                                          @if (Model.HasPermission(Feature.ExaminationEnum.AddMark.ToString()))
                                          {
                                            <li>
                                              <a href="#tab_classtestmark" onclick="renderAddClassTestMark()" data-toggle="tab">
                                                <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewSection.ClassTestMark"]</h5>
                                              </a>
                                            </li>

                                          }
                                          @if (Model.HasPermission(Feature.StudentEnum.FindStudent.ToString()))
                                          {
                                            <li>
                                              <a href="#tab_student" data-toggle="tab">
                                                <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewSection.Student"]</h5>
                                              </a>
                                            </li>
                                          }
                                          @if (Model.HasPermission(Feature.BranchMediumEnum.FindAcademicFees.ToString()))
                                          {
                                            <li>
                                              <a href="#tab_academicFee" data-toggle="tab">
                                                <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewSection.AcademicFee"]</h5>
                                              </a>
                                            </li>
                                          }
                                          <li>
                                            <a href="#tab_generalInfo" data-toggle="tab">
                                              <h5 class="caption-subject font-blue-madison bold uppercase">@Localizer["ViewSection.GeneralInfo"]</h5>
                                            </a>
                                          </li>
                                        </ul>
                                    </div>
                                    <div class="portlet-body">
                                        <div style="min-height:320px;">
                                            <!--BEGIN TABS-->
                                            <div class="tab-content">
                                                <div class="tab-pane" id="tab_generalInfo">
                                                    <div class="row-fluid">
                                                        <div class="col-md-4">
                                                            <div class="uppercase profile-stat-title">
                                                                <a href="/Session/ViewSession?id=@Model.Section.Session.Id&instituteId=@Model.Section.BranchMedium.Branch.Institute.Id">@Html.DisplayFor(model => model.Section.Session.SessionName) </a>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="uppercase profile-stat-title">
                                                                @Model.Section.Room?.RoomNo
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="uppercase profile-stat-title">
                                                                @Html.DisplayFor(model => model.Section.NumberOfStudents)
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="clearfix"></div>

                                                    <div class="row-fluid">
                                                        <div class="col-md-4">
                                                            <div class="uppercase profile-stat-text">
                                                                @Localizer["ViewSection.SessionName"]
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="uppercase profile-stat-text">
                                                                @Localizer["ViewSection.RoomNo"]
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="uppercase profile-stat-text">
                                                                @Localizer["ViewSection.NumberofStudents"]
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="clearfix"></div>
                                                    <hr />
                                                    <div class="row-fluid">
                                                        <div class="col-md-4">
                                                            <div class="uppercase profile-stat-title">
                                                                @Html.DisplayFor(model => model.Section.TotalClasses)
                                                            </div>
                                                        </div>

                                                        <div class="col-md-4">
                                                            <div class="uppercase profile-stat-title">
                                                                @Html.DisplayFor(model => model.Section.DurationOfClass)
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="clearfix"></div>

                                                    <div class="row-fluid">
                                                        <div class="col-md-4">
                                                            <div class="uppercase profile-stat-text">
                                                                @Localizer["ViewSection.NumberOfPeriods"]
                                                            </div>
                                                        </div>

                                                        <div class="col-md-4">
                                                            <div class="uppercase profile-stat-text">
                                                                @Localizer["ViewSection.MaxPeriodDuration"]
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="clearfix"></div>
                                                    <hr />

                                                </div>
                                                @if (Model.HasPermission(Feature.SectionEnum.FindClassRoutine.ToString()))
                                                {
                                                    <div class="tab-pane active" id="tab_classRoutine">

                                                        @Html.Partial("ViewRoutine", Model)

                                                    </div>
                                                }
                                                @if (Model.HasPermission(Feature.ExaminationEnum.FindClassTest.ToString()))
                                                {
                                                    <div class="tab-pane" id="tab_classTest">
                                                        <div id="classTestList">

                                                        </div>

                                                    </div>
                                                }
                                                @if (Model.HasPermission(Feature.ExaminationEnum.AddMark.ToString()))
                                                {
                                                    <div class="tab-pane" id="tab_classtestmark">

                                                        <div id="addClassTestMark">

                                                        </div>
                                                    </div>
                                                }
                                                @if (Model.HasPermission(Feature.StudentEnum.FindStudent.ToString()))
                                                {
                                                    <div class="tab-pane" id="tab_student">
                                                        <div style="min-height: 320px;">
                                                            <table class="table table-striped table-hover" id="sample_6">

                                                                <thead class="filterCriteria">
                                                                    <tr>
                                                                        <th>@Localizer["ViewSection.Name"]</th>
                                                                        <th>@Localizer["ViewSection.StudentID"]</th>
                                                                        <th>@Localizer["ViewSection.Birthday"]</th>
                                                                        <th>@Localizer["ViewSection.MobileNo"]</th>
                                                                        <th>@Localizer["ViewSection.RollNo"]</th>
                                                                    </tr>
                                                                </thead>

                                                                <tbody>
                                                                    @{
                                                                        if (Model.Section.StudentSections != null && Model.Section.StudentSections.Count > 0)
                                                                        {
                                                                            foreach (var studentSection in Model.Section.StudentSections)
                                                                            {
                                                                                <tr>
                                                                                    <td>
                                                                                        @if (Model.HasPermission(Feature.StudentEnum.ViewStudent.ToString()))
                                                                                        {
                                                                                            <a href="/Student/ViewStudent?studentId=@studentSection.Student.Id&branchmediumId=@Model.Section.BranchMedium.Id">
                                                                                                @Html.DisplayFor(model => studentSection.Student.FullName)
                                                                                            </a>
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            @Html.DisplayFor(model => studentSection.Student.FullName)
                                                                                        }
                                                                                    </td>
                                                                                    <td>@Html.DisplayFor(model => studentSection.Student.StudentId)</td>
                                                                                    <td>@studentSection.Student.BirthDate.ToString("dd MMMM, yyyy")</td>
                                                                                    <td>@Html.DisplayFor(model => studentSection.Student.MobileNo)</td>
                                                                                    <td>@Html.DisplayFor(model => studentSection.RollNo)</td>
                                                                                </tr>
                                                                            }
                                                                        }
                                                                    }

                                                                </tbody>
                                                            </table>
                                                        </div>
                                                    </div>
                                                }
                                                @if (Model.HasPermission(Feature.BranchMediumEnum.FindAcademicFees.ToString()))
                                                {
                                                    <div class="tab-pane" id="tab_academicFee">
                                                        <div class="scroller" style="height: 337px;" data-always-visible="1" data-rail-visible1="0" data-handle-color="#D7DCE2">
                                                            <div class="table-scrollable table-scrollable-borderless">
                                                                <table class="table table-striped table-hover" id="sample_6">

                                                                    <thead>
                                                                        <tr>
                                                                          <th>@Localizer["ViewSection.Class"]</th>
                                                                          <th>@Localizer["ViewSection.AccountHead"]</th>
                                                                          <th>@Localizer["ViewSection.Fee"]</th>
                                                                        </tr>
                                                                    </thead>

                                                                    <tbody>
                                                                        @{
                                                                            if (Model.Section.Class.AcademicFees != null && Model.Section.Class.AcademicFees.Count > 0)
                                                                            {
                                                                                foreach (var academicFee in Model.Section.Class.AcademicFees)
                                                                                {
                                                                                    <tr>
                                                                                        <td>
                                                                                            @Html.DisplayFor(model => academicFee.Class.ClassName)
                                                                                        </td>
                                                                                        <td>@Html.DisplayFor(model => academicFee.AccountHead.AccountHeadName)</td>
                                                                                        <td>@Html.DisplayFor(model => academicFee.Fees)</td>
                                                                                    </tr>
                                                                                }
                                                                            }
                                                                        }

                                                                    </tbody>
                                                                </table>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                            <!--END TABS-->
                                        </div>
                                        
                                    </div>
                                </div>
                                <!-- END PORTLET -->
                            </div>
                        </div>

                    </div>
                    <!-- END PROFILE CONTENT -->
                </div>
            </div>
        </div>
    </div>


</div>

@section Scripts
{
    <script>
        $(document).ready(function() {

        });

        function renderAddClassTestCalender() {
            var date = new Date();
            var sectionId = $('#showSectionId').val();
            var eventList = [];
            $.ajax({
                type: "GET",
                url: "/Section/GetAllClassTestEvents?sectionId=" + sectionId,
                dataType: "JSON",
                contentType: "application/json;charset=utf-8",
                success: function(data) {
                    if (data.length > 0) {
                        eventList = [];
                        jQuery.each(data,
                            function(index, item) {
                                var model = {
                                    start: item.start,
                                    end: item.end,
                                    color: item.color,
                                    url:item.url,
                                    title: item.title
                                };
                                eventList.push(model);
                            });
                        console.log(eventList);

                    }

                    $('#classTestList').fullCalendar({
                        date: date,
                        editable: false,
                        eventLimit: false, // allow "more" link when too many events
                        events: eventList,
                        defaultView: 'agendaWeek'
                    });


                },
                error: function(a, b, c) {

                }
            });
            $('#classTestList').fullCalendar('render');
        }


        function saveObtainedMark(studentId) {
            if ($('#row_' + studentId).find("td").eq(4).find("input").val() == null ||
                $('#row_' + studentId).find("td").eq(4).find("input").val() == '') {
                $('#error_' + studentId).text('Obtained mark is empty.');
                return;
            } else {
                $('#error_' + studentId).text('');
            }
            var fullMark = parseInt($('#row_' + studentId).find("td").eq(3).html());
            var obtainedMark = parseInt($('#row_' + studentId).find("td").eq(4).find("input").val());

            if (obtainedMark > fullMark) {
                $('#error_' + studentId).text('Obtained mark must be less than or equal to full mark.');
                return;
            } else
                $('#error_' + studentId).text('');

            var model = {
                ObtainedMark: obtainedMark,
                TestId: $("#classTestDropDown").val(),
                StudentSectionId: studentId
            };
            $.ajax({
                type: "POST",
                url: "/Mark/AddMark",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    if (response == true) {
                        
                        $('#savemsg_' + studentId).addClass('text-success');
                        $('#savemsg_' + studentId).text('Marks added');
                        //alert('Marks added');
                    } else {
                        $('#savemsg_' + studentId).addClass('text-danger');
                        $('#savemsg_' + studentId).text('Unable to add marks');
                    }
                },
                failure: function(response) {
                    console.log(response);
                    alert("Failure..! Could not save Data using Ajax.");
                },
                error: function(response) {
                    console.log(response);
                    alert("Error..! Could not save Data using Ajax.");
                }
            });
        }

        function renderAddClassTestMark() {

            $("#addClassTestMark").load("/Mark/AddMark?branchMediumId=" +
                @Model.Section.BranchMedium.Id +
                "&sectionId=" +
                @Model.Section.Id,
                function() {
                    configTable('#sample_2');
                    configTable('#sample_5');

                    var sessionDropDown = $("#sessionDropDown");
                    var termDropDown = $("#termDropDown");
                    var subjectDropDown = $("#subjectDropDown");
                    var examTypeDropDown = $("#examTypeDropDown");
                    var classTestDropDown = $("#classTestDropDown");


                    sessionDropDown.change(function() {
                        $.ajax({
                            type: "GET",
                            url: "/Mark/GetTerm?sessionId=" + sessionDropDown.val(),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function(response) {
                                $("#sample_2").find("tr:gt(0)").remove();
                                termDropDown.children('option:not(:first)').remove();
                                subjectDropDown.children('option:not(:first)').remove();
                                examTypeDropDown.children('option:not(:first)').remove();
                                classTestDropDown.children('option:not(:first)').remove();
                                jQuery.each(response,
                                    function(index, item) {
                                        var dropdownItem = new Option(item.TermName, item.TermId);
                                        termDropDown.append(dropdownItem);
                                    });
                            },
                            failure: function(response) {
                                alert("Failure..! Could not Fetch term Data using Ajax.");
                            },
                            error: function(response) {
                                alert("Error..! Could not Fetch term Data using Ajax.");
                            }
                        });
                    });

                    termDropDown.change(function() {
                        $.ajax({
                            type: "POST",
                            url: "/Mark/GetSubject?sessionId=" +
                                sessionDropDown.val() +
                                "&termId=" +
                                termDropDown.val() +
                                "&sectionId=" +
                                $('#studentSectionId').val(),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function(response) {
                                $("#sample_2").find("tr:gt(0)").remove();
                                subjectDropDown.children('option:not(:first)').remove();
                                examTypeDropDown.children('option:not(:first)').remove();
                                classTestDropDown.children('option:not(:first)').remove();
                                jQuery.each(response,
                                    function(index, item) {
                                        var dropdownItem = new Option(item.SubjectName, item.SubjectId);
                                        subjectDropDown.append(dropdownItem);
                                    });
                            },
                            failure: function(response) {
                                alert("Failure..! Could not Fetch Subject Data using Ajax.");
                            },
                            error: function(response) {
                                alert("Error..! Could not Fetch Subject Data using Ajax.");
                            }
                        });
                    });

                    subjectDropDown.change(function() {
                        $.ajax({
                            type: "GET",
                            url: "/Mark/GetExamType?sessionId=" +
                                sessionDropDown.val() +
                                "&termId=" +
                                termDropDown.val() +
                                "&subjectId=" +
                                subjectDropDown.val(),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function(response) {
                                $("#sample_2").find("tr:gt(0)").remove();
                                examTypeDropDown.children('option:not(:first)').remove();
                                classTestDropDown.children('option:not(:first)').remove();
                                jQuery.each(response,
                                    function(index, item) {
                                        var dropdownItem = new Option(item.ExamTypeName, item.ExamTypeId);
                                        examTypeDropDown.append(dropdownItem);
                                    });
                            },
                            failure: function(response) {
                                alert("Failure..! Could not Fetch exam type Data using Ajax.");
                            },
                            error: function(response) {
                                alert("Error..! Could not Fetch exam type Data using Ajax.");
                            }
                        });
                    });

                    examTypeDropDown.change(function() {
                        $.ajax({
                            type: "GET",
                            url: "/Mark/GetClassTest?sessionId=" +
                                sessionDropDown.val() +
                                "&termId=" +
                                termDropDown.val() +
                                "&subjectId=" +
                                subjectDropDown.val() +
                                "&examTypeId=" +
                                examTypeDropDown.val(),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function(response) {
                                $("#sample_2").find("tr:gt(0)").remove();
                                classTestDropDown.children('option:not(:first)').remove();
                                jQuery.each(response,
                                    function(index, item) {
                                        var dropdownItem = new Option(item.ClassTestName, item.ClassTestId);
                                        classTestDropDown.append(dropdownItem);
                                    });
                            },
                            failure: function(response) {
                                alert("Failure..! Could not Fetch ct Data using Ajax.");
                            },
                            error: function(response) {
                                alert("Error..! Could not Fetch ct Data using Ajax.");
                            }
                        });
                    });

                    classTestDropDown.change(function() {
                        $.ajax({
                            type: "GET",
                            url: "/Mark/GetStudents?classTestId=" + classTestDropDown.val(),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function(response) {
                                $("#sample_2").find("tr:gt(0)").remove();
                                jQuery.each(response,
                                    function(index, item) {

                                        $('#sample_2').append('<tr id="row_' +
                                            item.StudentSectionId +
                                            '">' +
                                            '<td>' +
                                            item.StudentName +
                                            '</td>' +
                                            '<td>' +
                                            item.SectionName +
                                            '</td>' +
                                            '<td>' +
                                            item.RollNo +
                                            ' </td>' +
                                            '<td>' +
                                            item.FullMark +
                                            '</td>' +
                                            '<td><input type="number" /><br/>' +
                                            '<span class="text-danger" id="error_' +
                                            item.StudentSectionId +
                                            '"></span></td>' +
                                            '<td><input type="button" class="btn custom-btn custom-cancel-btn" value ="Save" onClick=saveObtainedMark(' +
                                            item.StudentSectionId +
                                            ')><br/><span class="text-secondary" id="savemsg_' +
                                            item.StudentSectionId +
                                            '"></span></td></tr>');


                                    });
                            },
                            failure: function(response) {
                                alert("Failure..! Could not Fetch student Data using Ajax.");
                            },
                            error: function(response) {
                                alert("Error..! Could not Fetch ct Data using Ajax.");
                            }
                        });

                        $.ajax({
                            type: "GET",
                            url: "/Mark/GetOtherSectionsStudents?classTestId=" + classTestDropDown.val(),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (response) {
                                $("#sample_5").find("tr:gt(0)").remove();
                                jQuery.each(response,
                                    function (index, item) {

                                        $('#sample_2').append('<tr id="row_' +
                                            item.StudentSectionId +
                                            '">' +
                                            '<td>' +
                                            item.StudentName +
                                            '</td>' +
                                            '<td>' +
                                            item.SectionName +
                                            '</td>' +
                                            '<td>' +
                                            item.RollNo +
                                            ' </td>' +
                                            '<td>' +
                                            item.FullMark +
                                            '</td>' +
                                            '<td><input type="number" /><br/>' +
                                            '<span class="text-danger" id="error_' +
                                            item.StudentSectionId +
                                            '"></span></td>' +
                                            '<td><input type="button" class="btn custom-btn custom-cancel-btn" value ="Save" onClick=saveObtainedMark(' +
                                            item.StudentSectionId +
                                            ')><br/><span class="text-secondary" id="savemsg_' +
                                            item.StudentSectionId +
                                            '"></span></td></tr>');


                                    });
                            },
                            failure: function (response) {
                                alert("Failure..! Could not Fetch student Data using Ajax.");
                            },
                            error: function (response) {
                                alert("Error..! Could not Fetch ct Data using Ajax.");
                            }
                        });
                    });


                });


        }
    </script>

}